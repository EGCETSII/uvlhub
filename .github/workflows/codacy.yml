name: Codacy CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: uvlhub_root_password
          MYSQL_DATABASE: uvlhubdb_test
          MYSQL_USER: uvlhub_user
          MYSQL_PASSWORD: uvlhub_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check for outdated dependencies
      run: |
        # Obtener dependencias desactualizadas en JSON
        pip list --outdated --format=json > outdated.json || true

        # Escribir un resumen bonito en el Step Summary
        echo "## Dependencias desactualizadas" >> $GITHUB_STEP_SUMMARY
        if [ -s outdated.json ] && grep -q '"name"' outdated.json; then
          echo "Se encontraron dependencias con nuevas versiones disponibles." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Paquete | Instalada | Última | Tipo |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---:|---:|---|" >> $GITHUB_STEP_SUMMARY
          python -c "import json; d=json.load(open('outdated.json')); [print('| {0} | {1} | {2} | {3} |'.format(i['name'], i['version'], i['latest_version'], i.get('latest_filetype',''))) for i in d]" >> $GITHUB_STEP_SUMMARY || true
        else
          echo "No se encontraron dependencias desactualizadas." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upgrade outdated dependencies
      run: |
        set -e
        if [ -s outdated.json ] && grep -q '"name"' outdated.json; then
          pkgs=$(python -c 'import json; print(" ".join(p["name"] for p in json.load(open("outdated.json"))))' || true)
          if [ -n "$pkgs" ]; then
            echo "Actualizando paquetes: $pkgs"
            pip install -U $pkgs
            echo "## Paquetes actualizados" >> $GITHUB_STEP_SUMMARY
            python -c "import json; print('\n'.join('- {0}: {1} -> {2}'.format(p['name'], p['version'], p['latest_version']) for p in json.load(open('outdated.json'))))" >> $GITHUB_STEP_SUMMARY || true
          fi
        else
          echo "No hay paquetes para actualizar."
        fi
        pip freeze > requirements-updated.txt || true

    - name: Security audit with pip-audit
      run: |
        python -m pip install --upgrade pip-audit
        # Auditar el entorno instalado (incluye transitivas)
        pip-audit -f json -o pip-audit.json || true
        pip-audit -f sarif -o pip-audit.sarif || true

        echo "## Análisis de seguridad (pip-audit) - Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        if [ -s pip-audit.json ]; then
          python -c "import json; d=json.load(open('pip-audit.json')); vulns=[(p.get('name',''),p.get('version',''),len(p.get('vulns',[])),sorted({fv for v in p.get('vulns',[]) for fv in v.get('fix_versions',[]) if fv})) for p in d]; total=sum(c for _,_,c,_ in vulns); print('Total vulnerabilidades: {0}'.format(total)); print('| Paquete | Versión | Vulnerabilidades | Fix disponible |'); print('|---|---|---:|---|'); [print('| {0} | {1} | {2} | {3} |'.format(n,v,c, (', '.join(fixes) if fixes else '-'))) for n,v,c,fixes in vulns if c>0]" >> $GITHUB_STEP_SUMMARY || true
        else
          echo "pip-audit no generó resultados (archivo vacío o inexistente)." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Subir reporte pip-audit (JSON y SARIF)
      uses: actions/upload-artifact@v4
      with:
        name: pip-audit-${{ matrix.python-version }}
        path: |
          pip-audit.json
          pip-audit.sarif
        if-no-files-found: ignore
        retention-days: 7

    - name: Upload coverage to Codacy
      run: |
        pip install codacy-coverage
        coverage run -m pytest app/modules/ --ignore-glob='*selenium*'
        coverage xml 
        python-codacy-coverage -r coverage.xml
      env:
        FLASK_ENV: testing
        MARIADB_HOSTNAME: 127.0.0.1
        MARIADB_PORT: 3306
        MARIADB_TEST_DATABASE: uvlhubdb_test
        MARIADB_USER: uvlhub_user
        MARIADB_PASSWORD: uvlhub_password
        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
